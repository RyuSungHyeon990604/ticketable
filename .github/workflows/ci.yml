name: CI

on:
  pull_request:
    branches: ["develop"]
    types: [opened, synchronize]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      # Redis 서비스를 Docker 컨테이너로 실행하여 CI 환경에서 Redis 관련 기능을 테스트할 수 있도록 설정
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get changed file
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            module-*/**
            build.gradle
            settings.gradle

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle dependencies caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
              ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 캐시 디렉토리 생성: Path Validation Error 해결
      # ./gradlew projects로 Gradle 초기화, ~/.gradle/caches와 ~/.gradle/wrapper 생성
      - name: Initialize Gradle to make cache directories
        run: ./gradlew projects

      - name: Build and test changed modules
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          MODULES=("auth", "game", "ticket")
          
          # 공통 코드 변경 시 모든 모듈 빌드
          build_all_modules() {
            echo "Common files changed, building all modules..."
            ./gradlew build
          }

          # 특정 모듈만 빌드
          build_module() {
            local module=$1
            echo "Building and testing module-$module..."
            ./gradlew :module-$module:build
          }

          # 공통 코드 변경 확인
          if echo "$CHANGED_FILES" | grep -q "module-common/\|build.gradle\|settings.gradle"; then
            build_all_modules
          else
            for MODULE in "${MODULES[@]}"; do
              if echo "$CHANGED_FILES" | grep -q "module-$MODULE/"; then
                build_module "$MODULE"
              fi
            done
          fi