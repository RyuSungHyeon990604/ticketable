name: CD

#on:
#  pull_request:
#    branches: ["main"]
#    types: [closed]

on:
  push:
    branches: [ "develop" ]

jobs:
  deploy:
    #    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            module-*/**
            build.gradle
            settings.gradle

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle dependencies caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Initialize Gradle
        run: ./gradlew projects

      - name: Build Changed Modules
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          MODULES=("eureka" "auth" "game" "ticket" "gateway" "waiting" "auction" "point")

          build_all_modules() {
            echo "Common files changed, building all modules..."
            ./gradlew build -x test
          }

          build_module() {
            local module=$1
            echo "Building module-$module..."
            ./gradlew :module-$module:build -x test
          }

          if echo "$CHANGED_FILES" | grep -q "module-common/\|build.gradle\|settings.gradle"; then
            build_all_modules
          else
            for MODULE in "${MODULES[@]}"; do
              if echo "$CHANGED_FILES" | grep -q "module-$MODULE/"; then
                build_module "$MODULE"
              fi
            done
          fi

      - name: Docker caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('module-*/**/Dockerfile', 'module-*/**/build.gradle') }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Images
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          MODULES=("eureka" "auth" "game" "ticket" "gateway" "waiting" "auction" "point")
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          docker buildx create --use

          push_all_modules() {
            for MODULE in "${MODULES[@]}"; do
              echo "Building and pushing module-$MODULE image..."
              docker buildx build \
                --cache-from type=local,src=/tmp/.buildx-cache \
                --cache-to type=local,dest=/tmp/.buildx-cache \
                -t $AWS_REGISTRY/repo-ticketable:prod-$MODULE-$SHORT_SHA \
                --push -f module-$MODULE/Dockerfile .
            done
          }

          push_module() {
            local module=$1
            echo "Building and pushing module-$module image..."
            docker buildx build \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache \
              -t $AWS_REGISTRY/repo-ticketable:prod-$MODULE-$SHORT_SHA \
              --push -f module-$module/Dockerfile .
          }

          if echo "$CHANGED_FILES" | grep -q "module-common/\|build.gradle\|settings.gradle"; then
            push_all_modules
          else
            for MODULE in "${MODULES[@]}"; do
              if echo "$CHANGED_FILES" | grep -q "module-$MODULE/"; then
                push_module "$MODULE"
              fi
            done
          fi

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "‚úÖ SSH Ï†ëÏÜç ÏôÑÎ£å"

            CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
            MODULES=("eureka" "auth" "game" "ticket" "gateway" "waiting" "auction" "point")
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)

            # Docker ÏÑ§Ïπò
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Docker ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉùÏÑ±
            docker network create my-network || true

            # ECR Î°úÍ∑∏Ïù∏
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY }}

            # Î≥ÄÍ≤ΩÎêú Î™®ÎìàÎßå Î∞∞Ìè¨
            for MODULE in "${MODULES[@]}"; do
              if echo "$CHANGED_FILES" | grep -q "module-common/\|module-$MODULE/\|build.gradle\|settings.gradle"; then
                echo "üöÄ Deploying module-$MODULE"

                case $MODULE in
                  "eureka") port=8761 ;;
                  "gateway") port=8080 ;;
                  "game") port=8081 ;;
                  "ticket") port=8082 ;;
                  "auth") port=8083 ;;
                  "auction") port=8084 ;;
                  "waiting") port=8085 ;;
                  "point") port=8086 ;;
                  *) port=8080 ;;
                esac

                docker rm -f module-$MODULE || true
                docker pull ${{ secrets.AWS_REGISTRY }}/repo-ticketable:prod-$MODULE-$SHORT_SHA
                docker run -d --name module-$MODULE --network my-network -p $port:$port \
                  -e EUREKA_URL=http://module-eureka:8761/eureka/ \
                  -e DB_URL=${{ secrets.DB_URL }} \
                  -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
                  -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
                  -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
                  -e IMPORT_API_KEY=${{ secrets.IMPORT_API_KEY }} \
                  -e IMPORT_API_SECRET=${{ secrets.IMPORT_API_SECRET }} \
                  -e BUCKET_NAME=${{ secrets.BUCKET_NAME }} \
                  -e REGION_VALUE=${{ secrets.REGION_VALUE }} \
                  -e ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
                  -e SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
                  -e RECAPTCHA_VERIFY_URL=${{ secrets.RECAPTCHA_VERIFY_URL }} \
                  -e RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }} \
                  -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
                  -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
                  -e REDIS_USER=${{ secrets.REDIS_USER }} \
                  -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
                  ${{ secrets.AWS_REGISTRY }}/repo-ticketable:prod-$MODULE-$SHORT_SHA
              fi
            done