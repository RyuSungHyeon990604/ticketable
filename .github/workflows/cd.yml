name: CD

#on:
#  pull_request:
#    branches: ["main"]
#    types: [closed]

on:
  push:
    branches: [ "develop" ]

jobs:
  get-changed-files:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            module-*/**
            build.gradle
            settings.gradle
        # 디버깅 로그 추가
      - name: Debug changed files
        run: |
          echo "All changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          echo "Any changed: ${{ steps.changed-files.outputs.any_changed }}"
          echo "Any modified: ${{ steps.changed-files.outputs.any_modified }}"
  

  deploy-eureka:
    runs-on: ubuntu-latest
    needs: get-changed-files
    if: contains(needs.get-changed-files.outputs.changed_files, 'module-eureka/') || contains(needs.get-changed-files.outputs.changed_files, 'build.gradle') || contains(needs.get-changed-files.outputs.changed_files, 'settings.gradle')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle dependencies caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build eureka
        run: ./gradlew :module-eureka:build -x test

      - name: Docker caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('module-eureka/**/Dockerfile', 'module-eureka/**/build.gradle') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          docker buildx create --use
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            -t $AWS_REGISTRY/repo-ticketable:eureka-$SHORT_SHA \
            --push -f module-eureka/Dockerfile .

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST_EUREKA }} # eureka 전용 EC2 호스트
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY_EUREKA }}
          script: |
            echo "✅ SSH 접속 완료"
            
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            
            # Docker 설치
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            newgrp docker || true
            
            # ECR 로그인 시도 추가
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY }}

            # 기존 컨테이너 제거 및 새 이미지 배포
            sudo docker rm -f module-eureka || true
            sudo docker pull ${{ secrets.AWS_REGISTRY }}/repo-ticketable:eureka-$SHORT_SHA
            sudo docker run -d --name module-eureka --network host -p 8761:8761 \
              ${{ secrets.AWS_REGISTRY }}/repo-ticketable:eureka-$SHORT_SHA
  

  deploy-auth:
    runs-on: ubuntu-latest
    needs: [get-changed-files]
    if: contains(needs.get-changed-files.outputs.changed_files, 'module-auth/') || contains(needs.get-changed-files.outputs.changed_files, 'build.gradle') || contains(needs.get-changed-files.outputs.changed_files, 'settings.gradle')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle dependencies caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build auth
        run: ./gradlew :module-auth:build -x test

      - name: Docker caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('module-auth/**/Dockerfile', 'module-auth/**/build.gradle') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          docker buildx create --use
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            -t $AWS_REGISTRY/repo-ticketable:auth-$SHORT_SHA \
            --push -f module-auth/Dockerfile .

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST_AUTH }} # auth 전용 EC2 호스트
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY_AUTH }}
          script: |
            echo "✅ SSH 접속 완료"
            
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            
            # Docker 설치
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            newgrp docker || true
            
            # ECR 로그인 시도 추가
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY }}

            # 기존 컨테이너 제거 및 새 이미지 배포
            sudo docker rm -f module-auth || true
            sudo docker pull ${{ secrets.AWS_REGISTRY }}/repo-ticketable:auth-$SHORT_SHA
            sudo docker run -d --name module-auth --network host -p 8083:8083 \
              -e eureka.client.serviceUrl.defaultZone=${{ secrets.EUREKA_URL }} \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e JWT_ACCESS_TOKEN=${{ secrets.JWT_ACCESS_TOKEN }} \
              -e RECAPTCHA_VERIFY_URL=${{ secrets.RECAPTCHA_VERIFY_URL }} \
              -e RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e REDIS_USER=${{ secrets.REDIS_USER }} \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e JWT_ACCESS_TOKEN=${{ secrets.JWT_ACCESS_TOKEN }} \
              ${{ secrets.AWS_REGISTRY }}/repo-ticketable:auth-$SHORT_SHA
  

  deploy-auction:
    runs-on: ubuntu-latest
    needs: [get-changed-files]
    if: contains(needs.get-changed-files.outputs.changed_files, 'module-auction/') || contains(needs.get-changed-files.outputs.changed_files, 'build.gradle') || contains(needs.get-changed-files.outputs.changed_files, 'settings.gradle')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle dependencies caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build auction
        run: ./gradlew :module-auction:build -x test

      - name: Docker caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('module-auction/**/Dockerfile', 'module-auction/**/build.gradle') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          docker buildx create --use
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            -t $AWS_REGISTRY/repo-ticketable:auction-$SHORT_SHA \
            --push -f module-auction/Dockerfile .

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST_AUCTION }} # auction 전용 EC2 호스트
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY_AUCTION }}
          script: |
            echo "✅ SSH 접속 완료"
            
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            
            # Docker 설치
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            newgrp docker || true
            
            # ECR 로그인 시도 추가
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY }}

            # 기존 컨테이너 제거 및 새 이미지 배포
            sudo docker rm -f module-auction || true
            sudo docker pull ${{ secrets.AWS_REGISTRY }}/repo-ticketable:auction-$SHORT_SHA
            sudo docker run -d --name module-auction --network host -p 8084:8084 \
              -e eureka.client.serviceUrl.defaultZone=${{ secrets.EUREKA_URL }} \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e JWT_ACCESS_TOKEN=${{ secrets.JWT_ACCESS_TOKEN }} \
              -e IMPORT_API_KEY=${{ secrets.IMPORT_API_KEY }} \
              -e IMPORT_API_SECRET=${{ secrets.IMPORT_API_SECRET }} \
              -e BUCKET_NAME=${{ secrets.BUCKET_NAME }} \
              -e REGION_VALUE=${{ secrets.REGION_VALUE }} \
              -e ACCESS_KEY=${{ secrets.ACCESS_KEY }} \
              -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e REDIS_USER=${{ secrets.REDIS_USER }} \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              ${{ secrets.AWS_REGISTRY }}/repo-ticketable:auction-$SHORT_SHA
  

  deploy-game:
    runs-on: ubuntu-latest
    needs: [get-changed-files]
    if: contains(needs.get-changed-files.outputs.changed_files, 'module-game/') || contains(needs.get-changed-files.outputs.changed_files, 'build.gradle') || contains(needs.get-changed-files.outputs.changed_files, 'settings.gradle')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle dependencies caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build game
        run: ./gradlew :module-game:build -x test

      - name: Docker caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('module-game/**/Dockerfile', 'module-game/**/build.gradle') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          docker buildx create --use
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            -t $AWS_REGISTRY/repo-ticketable:game-$SHORT_SHA \
            --push -f module-game/Dockerfile .

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST_GAME }} # game 전용 EC2 호스트
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY_GAME }}
          script: |
            echo "✅ SSH 접속 완료"
            
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            
            # Docker 설치
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            newgrp docker || true
            
            # ECR 로그인 시도 추가
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY }}

            # 기존 컨테이너 제거 및 새 이미지 배포
            sudo docker rm -f module-game || true
            sudo docker pull ${{ secrets.AWS_REGISTRY }}/repo-ticketable:game-$SHORT_SHA
            sudo docker run -d --name module-game --network host -p 8081:8081 \
              -e eureka.client.serviceUrl.defaultZone=${{ secrets.EUREKA_URL }} \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e JWT_ACCESS_TOKEN=${{ secrets.JWT_ACCESS_TOKEN }} \
              -e IMPORT_API_KEY=${{ secrets.IMPORT_API_KEY }} \
              -e IMPORT_API_SECRET=${{ secrets.IMPORT_API_SECRET }} \
              -e BUCKET_NAME=${{ secrets.BUCKET_NAME }} \
              -e REGION_VALUE=${{ secrets.REGION_VALUE }} \
              -e ACCESS_KEY=${{ secrets.ACCESS_KEY }} \
              -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e REDIS_USER=${{ secrets.REDIS_USER }} \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              ${{ secrets.AWS_REGISTRY }}/repo-ticketable:game-$SHORT_SHA


  deploy-gateway:
    runs-on: ubuntu-latest
    needs: [get-changed-files]
    if: contains(needs.get-changed-files.outputs.changed_files, 'module-gateway/') || contains(needs.get-changed-files.outputs.changed_files, 'build.gradle') || contains(needs.get-changed-files.outputs.changed_files, 'settings.gradle')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle dependencies caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build gateway
        run: ./gradlew :module-gateway:build -x test

      - name: Docker caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('module-gateway/**/Dockerfile', 'module-gateway/**/build.gradle') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          docker buildx create --use
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            -t $AWS_REGISTRY/repo-ticketable:gateway-$SHORT_SHA \
            --push -f module-gateway/Dockerfile .

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST_GATEWAY }} # gateway 전용 EC2 호스트
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY_GATEWAY }}
          script: |
            echo "✅ SSH 접속 완료"
            
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            
            # Docker 설치
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            newgrp docker || true
            
            # ECR 로그인 시도 추가
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY }}

            # 기존 컨테이너 제거 및 새 이미지 배포
            sudo docker rm -f module-gateway || true
            sudo docker pull ${{ secrets.AWS_REGISTRY }}/repo-ticketable:gateway-$SHORT_SHA
            sudo docker run -d --name module-gateway --network host -p 8080:8080 \
              -e eureka.client.serviceUrl.defaultZone=${{ secrets.EUREKA_URL }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e REDIS_USER=${{ secrets.REDIS_USER }} \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              ${{ secrets.AWS_REGISTRY }}/repo-ticketable:gateway-$SHORT_SHA


  deploy-point:
    runs-on: ubuntu-latest
    needs: [get-changed-files]
    if: contains(needs.get-changed-files.outputs.changed_files, 'module-point/') || contains(needs.get-changed-files.outputs.changed_files, 'build.gradle') || contains(needs.get-changed-files.outputs.changed_files, 'settings.gradle')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle dependencies caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build point
        run: ./gradlew :module-point:build -x test

      - name: Docker caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('module-point/**/Dockerfile', 'module-point/**/build.gradle') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          docker buildx create --use
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            -t $AWS_REGISTRY/repo-ticketable:point-$SHORT_SHA \
            --push -f module-point/Dockerfile .

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST_POINT }} # point 전용 EC2 호스트
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY_POINT }}
          script: |
            echo "✅ SSH 접속 완료"
            
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            
            # Docker 설치
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            newgrp docker || true
            
            # ECR 로그인 시도 추가
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY }}

            # 기존 컨테이너 제거 및 새 이미지 배포
            sudo docker rm -f module-point || true
            sudo docker pull ${{ secrets.AWS_REGISTRY }}/repo-ticketable:point-$SHORT_SHA
            sudo docker run -d --name module-point --network host -p 8086:8086 \
              -e eureka.client.serviceUrl.defaultZone=${{ secrets.EUREKA_URL }} \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e IMPORT_API_KEY=${{ secrets.IMPORT_API_KEY }} \              
              -e SPRING_PROFILES_ACTIVE=prod \
              -e IMPORT_API_SECRET=${{ secrets.IMPORT_API_SECRET }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e REDIS_USER=${{ secrets.REDIS_USER }} \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              ${{ secrets.AWS_REGISTRY }}/repo-ticketable:point-$SHORT_SHA


  deploy-ticket:
    runs-on: ubuntu-latest
    needs: [get-changed-files]
    if: contains(needs.get-changed-files.outputs.changed_files, 'module-ticket/') || contains(needs.get-changed-files.outputs.changed_files, 'build.gradle') || contains(needs.get-changed-files.outputs.changed_files, 'settings.gradle')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle dependencies caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build ticket
        run: ./gradlew :module-ticket:build -x test

      - name: Docker caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('module-ticket/**/Dockerfile', 'module-ticket/**/build.gradle') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          docker buildx create --use
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            -t $AWS_REGISTRY/repo-ticketable:ticket-$SHORT_SHA \
            --push -f module-ticket/Dockerfile .

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST_TICKET }} # ticket 전용 EC2 호스트
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY_TICKET }}
          script: |
            echo "✅ SSH 접속 완료"
            
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            
            # Docker 설치
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            newgrp docker || true
            
            # ECR 로그인 시도 추가
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY }}

            # 기존 컨테이너 제거 및 새 이미지 배포
            sudo docker rm -f module-ticket || true
            sudo docker pull ${{ secrets.AWS_REGISTRY }}/repo-ticketable:ticket-$SHORT_SHA
            sudo docker run -d --name module-ticket --network host -p 8082:8082 \
              -e eureka.client.serviceUrl.defaultZone=${{ secrets.EUREKA_URL }} \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e JWT_ACCESS_TOKEN=${{ secrets.JWT_ACCESS_TOKEN }} \
              -e IMPORT_API_KEY=${{ secrets.IMPORT_API_KEY }} \
              -e IMPORT_API_SECRET=${{ secrets.IMPORT_API_SECRET }} \
              -e BUCKET_NAME=${{ secrets.BUCKET_NAME }} \
              -e REGION_VALUE=${{ secrets.REGION_VALUE }} \
              -e ACCESS_KEY=${{ secrets.ACCESS_KEY }} \
              -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e REDIS_USER=${{ secrets.REDIS_USER }} \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              ${{ secrets.AWS_REGISTRY }}/repo-ticketable:ticket-$SHORT_SHA


  deploy-waiting:
    runs-on: ubuntu-latest
    needs: [get-changed-files]
    if: contains(needs.get-changed-files.outputs.changed_files, 'module-waiting/') || contains(needs.get-changed-files.outputs.changed_files, 'build.gradle') || contains(needs.get-changed-files.outputs.changed_files, 'settings.gradle')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle dependencies caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build waiting
        run: ./gradlew :module-waiting:build -x test

      - name: Docker caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('module-waiting/**/Dockerfile', 'module-waiting/**/build.gradle') }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          AWS_REGISTRY: ${{ secrets.AWS_REGISTRY }}
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          docker buildx create --use
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            -t $AWS_REGISTRY/repo-ticketable:waiting-$SHORT_SHA \
            --push -f module-waiting/Dockerfile .

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST_WAITING }} # waiting 전용 EC2 호스트
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY_WAITING }}
          script: |
            echo "✅ SSH 접속 완료"
            
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            
            # Docker 설치
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            newgrp docker || true
            
            # ECR 로그인 시도 추가
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY }}

            # 기존 컨테이너 제거 및 새 이미지 배포
            sudo docker rm -f module-waiting || true
            sudo docker pull ${{ secrets.AWS_REGISTRY }}/repo-ticketable:waiting-$SHORT_SHA
            sudo docker run -d --name module-waiting --network host -p 8085:8085 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e eureka.client.serviceUrl.defaultZone=${{ secrets.EUREKA_URL }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e REDIS_USER=${{ secrets.REDIS_USER }} \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              ${{ secrets.AWS_REGISTRY }}/repo-ticketable:waiting-$SHORT_SHA